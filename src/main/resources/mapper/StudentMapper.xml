<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.dms_idea.dao.StudentMapper">

    <select id="getStudentList">
        select *
        from dormitory_management_system.view_get_all_student_list
        <where>
            <if test="map.name!=null">and name like concat('%',#{map.name},'%')</if>
            <if test="map.studyId!=null">and study_id like concat('%',#{map.studyId},'%')</if>
            <if test="map.gender!=null">and gender=#{map.gender}</if>
            <if test="map.entranceYear!=null">and entrance_year=#{map.entranceYear}</if>
            <if test="dormitoryList.size()>0">and dormitory_id in
                <foreach collection="dormitoryList" item="item" separator="," open="(" close=")">
                    #{item}
                </foreach>
            </if>
            <if test="clazzList.size()>0">and clazz_id in
                <foreach collection="clazzList" item="item" separator="," open="(" close=")">
                    #{item}
                </foreach>
            </if>
        </where>
        <if test="prop!=null">
            order by ${prop} ${order}
        </if>
    </select>

    <resultMap id="StudentInfoList" type="Student">
        <id property="id" column="id"/>
        <result property="name" column="name"/>
        <result property="buildingId" column="building_id"/>
        <result property="buildingName" column="building_name"/>
        <result property="dormitoryId" column="dormitory_id"/>
        <result property="dormitoryName" column="dormitory_name"/>
        <result property="unitNumber" column="unit_number"/>
        <result property="floorNumber" column="floor_number"/>
        <result property="insId" column="ins_id"/>
        <result property="insName" column="ins_name"/>
        <result property="majorId" column="major_id"/>
        <result property="majorName" column="major_name"/>
        <result property="clazzId" column="clazz_id"/>
        <result property="clazzName" column="clazz_name"/>
        <result property="clazzYear" column="clazz_year"/>
        <result property="managerId" column="manager_id"/>
        <result property="gender" column="gender"/>
        <result property="studyId" column="study_id"/>
        <result property="entranceYear" column="entrance_year"/>
        <association property="studentInfo" javaType="StudentInfo">
            <id property="id" column="id"/>
            <result property="phone" column="phone"/>
            <result property="picture" column="picture"/>
            <result property="email" column="email"/>
            <result property="introduction" column="introduction"/>
            <result property="updateTime" column="update_time"/>
            <result property="ethnicity" column="ethnicity"/>
            <result property="birthday" column="birthday"/>
        </association>
    </resultMap>

    <select id="getStudentById" resultMap="StudentInfoList">
        select *
        from dormitory_management_system.view_get_all_studentinfo_list
        where id = #{id}
    </select>

    <select id="getStudentByDormitoryId" resultMap="StudentInfoList">
        select *
        from dormitory_management_system.view_get_all_studentinfo_list
        where dormitory_id = #{id}
    </select>

    <select id="getSimpleStudentById">
        select *
        from dormitory_management_system.view_get_all_student_list
        where id = #{id}
    </select>

    <insert id="addStudent">
        insert into dormitory_management_system.student(user_id, dormitory_id, study_id, gender, major_id, clazz_id,
                                                        ins_id, entrance_year)
        VALUES (#{userId}, #{dormitoryId}, #{studyId}, #{gender}, #{majorId}, #{clazzId}, #{insId}, #{entranceYear})
    </insert>

    <insert id="addStudentInfo">
        insert into dormitory_management_system.student_info(student_id, update_time)
        VALUES (#{id}, now())
    </insert>

    <update id="updateStudentInfo">
        update dormitory_management_system.student_info
        set phone        = #{phone}
          , picture      = #{picture}
          , email        =#{email}
          , introduction =#{introduction}
          , update_time  = now()
          , ethnicity    = #{ethnicity}
          , birthday     = #{birthday}
        where student_id = #{id};
    </update>

    <update id="updateStudentGender">
        update dormitory_management_system.student
        set gender = #{gender}
        where user_id = #{id}
    </update>

    <update id="updateStudentEntranceYear">
        update dormitory_management_system.student
        set entrance_year = #{entranceYear}
        where user_id = #{id}
    </update>

    <update id="updateStudentDormitoryId">
        update dormitory_management_system.student
        set dormitory_id = #{dormitoryId}
        where user_id = #{id}
    </update>

    <update id="updateStudentClazzId">
        update dormitory_management_system.student
        set clazz_id = #{clazzId}
        where user_id = #{id};
    </update>

    <update id="updateStudentMajorId">
        update dormitory_management_system.student
        set major_id = #{majorId}
        where user_id = #{id};
    </update>

    <update id="updateStudentInsId">
        update dormitory_management_system.student
        set ins_id = #{insId}
        where user_id = #{id};
    </update>

    <delete id="deleteStudent">
        delete from dormitory_management_system.student where user_id = #{id}
    </delete>

    <delete id="deleteStudentInfo">
        delete from dormitory_management_system.student_info where student_id = #{id}
    </delete>
</mapper>